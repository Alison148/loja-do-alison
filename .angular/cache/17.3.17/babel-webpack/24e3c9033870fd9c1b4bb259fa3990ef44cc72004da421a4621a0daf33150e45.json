{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component } from '@angular/core';\nimport { ProdutoService } from '../../services/produto.service';\nimport Swal from 'sweetalert2';\nlet PdvComponent = class PdvComponent {\n  constructor(produtoService) {\n    this.produtoService = produtoService;\n    this.operador = 'Alison Antunes';\n    this.dataHoje = new Date().toLocaleDateString();\n    this.carrinho = [];\n    this.formaPagamento = 'dinheiro';\n    this.parcelas = 1;\n    this.opcoesParcelas = [1, 2, 3, 4, 6, 10, 12];\n    this.valorRecebido = 0;\n    this.fundoDeCaixa = 100;\n    this.desconto = 0;\n    this.acrescimo = 0;\n  }\n  ngOnInit() {\n    this.carrinho = this.produtoService.listarCarrinho();\n  }\n  totalSemDescontos() {\n    return this.carrinho.reduce((total, p) => total + p.preco * p.quantidade, 0);\n  }\n  totalFinal() {\n    return this.totalSemDescontos() - this.desconto + this.acrescimo;\n  }\n  valorParcela() {\n    return this.formaPagamento === 'credito' ? this.totalFinal() / this.parcelas : this.totalFinal();\n  }\n  calcularTroco() {\n    if (this.formaPagamento === 'dinheiro') {\n      return this.valorRecebido - this.totalFinal();\n    }\n    return 0;\n  }\n  editarQuantidade(item, novaQtd) {\n    if (novaQtd <= 0) {\n      this.removerItem(item);\n    } else {\n      item.quantidade = novaQtd;\n    }\n  }\n  removerItem(item) {\n    this.carrinho = this.carrinho.filter(p => p !== item);\n  }\n  finalizarCompra() {\n    if (!this.formaPagamento) {\n      Swal.fire('Erro', 'Escolha a forma de pagamento', 'warning');\n      return;\n    }\n    // Atualiza estoque\n    this.carrinho.forEach(item => {\n      this.produtoService.baixarEstoque(item.id, item.quantidade);\n    });\n    Swal.fire('Compra Finalizada!', 'Nota Fiscal disponível para impressão.', 'success');\n    this.produtoService.registrarVenda({\n      data: new Date(),\n      itens: this.carrinho,\n      total: this.totalFinal(),\n      pagamento: this.formaPagamento,\n      operador: this.operador\n    });\n    this.produtoService.limparCarrinho();\n    this.ngOnInit(); // Atualiza carrinho\n  }\n  imprimirNotaFiscal() {\n    const area = document.getElementById('notaFiscal');\n    if (area) {\n      const printWin = window.open('', '_blank');\n      printWin.document.write('<html><head><title>Nota Fiscal</title></head><body>');\n      printWin.document.write(area.innerHTML);\n      printWin.document.write('</body></html>');\n      printWin.document.close();\n      printWin.print();\n    }\n  }\n};\nPdvComponent = __decorate([Component({\n  selector: 'app-pdv',\n  templateUrl: './pdv.component.html'\n}), __metadata(\"design:paramtypes\", [ProdutoService])], PdvComponent);\nexport { PdvComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}