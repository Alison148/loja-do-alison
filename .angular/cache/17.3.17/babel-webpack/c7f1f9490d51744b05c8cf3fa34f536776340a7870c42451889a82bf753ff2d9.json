{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component } from '@angular/core';\nimport Swal from 'sweetalert2';\nimport { ProdutoService } from '../../services/produto.service'; // ✅ importação do serviço\nlet PdvComponent = class PdvComponent {\n  constructor(service) {\n    this.service = service;\n    this.operador = 'Alison Antunes';\n    this.fundoDeCaixa = 100.00;\n    this.formaPagamento = 'dinheiro';\n    this.parcelas = 1;\n    this.opcoesParcelas = [1, 2, 3, 4, 5, 6, 10, 12];\n    this.carrinho = [{\n      nome: 'Produto 1',\n      preco: 50\n    }, {\n      nome: 'Produto 2',\n      preco: 30\n    }, {\n      nome: 'Produto 3',\n      preco: 20\n    }];\n    this.produtos = []; // ✅ propriedade para armazenar os produtos carregados\n  }\n  ngOnInit() {\n    this.produtos = this.service.obterProdutosParaPdv(); // ✅ carregamento inicial\n  }\n  total() {\n    return this.carrinho.reduce((soma, item) => soma + item.preco, 0);\n  }\n  calcularTroco() {\n    if (this.formaPagamento === 'dinheiro') {\n      return this.fundoDeCaixa - this.total();\n    }\n    return 0;\n  }\n  finalizarCompra() {\n    Swal.fire({\n      title: 'Confirma a venda?',\n      text: `Forma de pagamento: ${this.formaPagamento.toUpperCase()}` + (this.formaPagamento === 'credito' ? ` | ${this.parcelas}x` : ''),\n      icon: 'info',\n      showCancelButton: true,\n      confirmButtonText: 'Confirmar',\n      cancelButtonText: 'Cancelar'\n    }).then(result => {\n      if (result.isConfirmed) {\n        Swal.fire('Venda Finalizada!', 'Obrigado pela compra.', 'success');\n        this.carrinho = [];\n      }\n    });\n  }\n};\nPdvComponent = __decorate([Component({\n  selector: 'app-pdv',\n  templateUrl: './pdv.component.html'\n}), __metadata(\"design:paramtypes\", [ProdutoService])], PdvComponent);\nexport { PdvComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}